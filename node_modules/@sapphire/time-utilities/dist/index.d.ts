/**
 * Display the duration
 * @param duration The duration in milliseconds to parse and display
 * @param assets The language assets
 */
declare class DurationFormatter {
    units: DurationFormatAssetsTime;
    constructor(units?: DurationFormatAssetsTime);
    format(duration: number, precision?: number, { left: leftSeparator, right: rightSeparator }?: DurationFormatSeparators): string;
}
interface DurationFormatSeparators {
    left?: string;
    right?: string;
}
interface DurationFormatAssetsUnit extends Record<number, string> {
    DEFAULT: string;
}
interface DurationFormatAssetsTime {
    [TimeTypes.Second]: DurationFormatAssetsUnit;
    [TimeTypes.Minute]: DurationFormatAssetsUnit;
    [TimeTypes.Hour]: DurationFormatAssetsUnit;
    [TimeTypes.Day]: DurationFormatAssetsUnit;
    [TimeTypes.Week]: DurationFormatAssetsUnit;
    [TimeTypes.Month]: DurationFormatAssetsUnit;
    [TimeTypes.Year]: DurationFormatAssetsUnit;
}

/**
 * The supported time types
 */
declare enum TimeTypes {
    Second = "second",
    Minute = "minute",
    Hour = "hour",
    Day = "day",
    Week = "week",
    Month = "month",
    Year = "year"
}
declare enum Time {
    Millisecond = 1,
    Second = 1000,
    Minute = 60000,
    Hour = 3600000,
    Day = 86400000,
    Month = 2628000000,
    Year = 31536000000
}

/**
 * Handles Cron strings and generates dates based on the cron string provided.
 * @see https://en.wikipedia.org/wiki/Cron
 */
declare class Cron {
    cron: string;
    normalized: string;
    minutes: number[];
    hours: number[];
    days: number[];
    months: number[];
    dows: number[];
    /**
     * @param cron The cron pattern to use
     */
    constructor(cron: string);
    /**
     * Get the next date that matches with the current pattern
     * @param outset The Date instance to compare with
     * @param origin Whether this next call is origin
     */
    next(outset?: Date, origin?: boolean): Date;
    /**
     * Normalize the pattern
     * @param cron The pattern to normalize
     */
    private static normalize;
    /**
     * Parse the pattern
     * @param cron The pattern to parse
     */
    private static parseString;
    /**
     * Parse the current part
     * @param cronPart The part of the pattern to parse
     * @param id The id that identifies the current part
     */
    private static parsePart;
}

/**
 * Converts duration strings into ms and future dates
 */
declare class Duration {
    /**
     * The offset
     */
    offset: number;
    /**
     * Create a new Duration instance
     * @param pattern The string to parse
     */
    constructor(pattern: string);
    /**
     * Get the date from now
     */
    get fromNow(): Date;
    /**
     * Get the date from
     * @param date The Date instance to get the date from
     */
    dateFrom(date: Date): Date;
    /**
     * The RegExp used for the pattern parsing
     */
    private static readonly kPatternRegex;
    /**
     * The RegExp used for removing commas
     */
    private static readonly kCommaRegex;
    /**
     * The RegExp used for replacing a/an with 1
     */
    private static readonly kAanRegex;
    /**
     * Parse the pattern
     * @param pattern The pattern to parse
     */
    private static parse;
}

/**
 * Manages timers so that this application can be cleanly exited
 */
declare class TimerManager extends null {
    /**
     * A set of timeouts to clear on destroy
     */
    private static storedTimeouts;
    /**
     * A set of intervals to clear on destroy
     */
    private static storedIntervals;
    /**
     * Creates a timeout gets cleared when destroyed
     * @param fn callback function
     * @param delay amount of time before running the callback
     * @param args additional arguments to pass back to the callback
     */
    static setTimeout<A = unknown>(fn: (...args: A[]) => void, delay: number, ...args: A[]): NodeJS.Timeout;
    /**
     * Clears a timeout created through this class
     * @param timeout The timeout to clear
     */
    static clearTimeout(timeout: NodeJS.Timeout): void;
    /**
     * Creates an interval gets cleared when destroyed
     * @param fn callback function
     * @param delay amount of time before running the callback
     * @param args additional arguments to pass back to the callback
     */
    static setInterval<A = unknown>(fn: (...args: A[]) => void, delay: number, ...args: A[]): NodeJS.Timeout;
    /**
     * Clears an internal created through this class
     * @param interval The interval to clear
     */
    static clearInterval(interval: NodeJS.Timeout): void;
    /**
     * Clears running timeouts and intervals created through this class so NodeJS can gracefully exit
     */
    static destroy(): void;
}

declare type TimeResolvable = Date | number | string;
interface TimestampTemplateEntry {
    type: string;
    content: string | null;
}
/**
 * Timestamp class, parses the pattern once, displays the desired Date or UNIX timestamp with the selected pattern.
 */
declare class Timestamp {
    /**
     * The raw pattern
     * @since 1.0.0
     */
    pattern: string;
    /**
     * @since 1.0.0
     */
    private template;
    /**
     * Starts a new Timestamp and parses the pattern.
     * @since 1.0.0
     * @param pattern The pattern to parse
     */
    constructor(pattern: string);
    /**
     * Display the current date with the current pattern.
     * @since 1.0.0
     * @param time The time to display
     */
    display(time?: TimeResolvable): string;
    /**
     * Display the current date utc with the current pattern.
     * @since 1.0.0
     * @param time The time to display in utc
     */
    displayUTC(time?: TimeResolvable): string;
    /**
     * Edits the current pattern.
     * @since 1.0.0
     * @param pattern The new pattern for this instance
     * @chainable
     */
    edit(pattern: string): this;
    /**
     * Defines the toString behavior of Timestamp.
     */
    toString(): string;
    /**
     * Display the current date with the current pattern.
     * @since 1.0.0
     * @param pattern The pattern to parse
     * @param time The time to display
     */
    static displayArbitrary(pattern: string, time?: TimeResolvable): string;
    /**
     * Display the current date utc with the current pattern.
     * @since 1.0.0
     * @param pattern The pattern to parse
     * @param time The time to display
     */
    static displayUTCArbitrary(pattern: string, time?: TimeResolvable): string;
    /**
     * Creates a UTC Date object to work with.
     * @since 1.0.0
     * @param time The date to convert to utc
     */
    static utc(time?: Date | number | string): Date;
    /**
     * Display the current date with the current pattern.
     * @since 1.0.0
     * @param template The pattern to parse
     * @param time The time to display
     */
    private static display;
    /**
     * Parses the pattern.
     * @since 1.0.0
     * @param pattern The pattern to parse
     */
    private static parse;
    /**
     * Resolves a date.
     * @since 1.0.0
     * @param time The time to parse
     */
    private static resolveDate;
}

export { Cron, Duration, DurationFormatAssetsTime, DurationFormatAssetsUnit, DurationFormatSeparators, DurationFormatter, Time, TimeResolvable, TimeTypes, TimerManager, Timestamp, TimestampTemplateEntry };
