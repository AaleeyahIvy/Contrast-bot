"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const serialize_javascript_1 = __importDefault(require("serialize-javascript"));
const on_change_1 = __importDefault(require("on-change"));
const error_js_1 = __importDefault(require("./error.js"));
const utils_js_1 = require("./utils.js");
const path_1 = require("path");
const fs_1 = __importDefault(require("fs"));
const pkgdata = require('../package.json');
const better_sqlite3_1 = __importDefault(require("better-sqlite3")); // /lib/database
const instances = [];
process.on('exit', () => {
    for (const instance of instances)
        instance.close();
});
var CloneLevel;
(function (CloneLevel) {
    CloneLevel["NONE"] = "none";
    CloneLevel["SHALLOW"] = "shallow";
    CloneLevel["DEEP"] = "deep";
})(CloneLevel || (CloneLevel = {}));
class Enmap {
    // User Options
    #name;
    #cloneLevel;
    #ensureProps;
    #serializer;
    #deserializer;
    #autoEnsure;
    #wal;
    #verbose;
    #changedCB;
    // Internal
    #off;
    #db;
    #isDestroyed;
    // Statements
    #deleteStmt;
    #insertStmt;
    #getPaginatedStmt;
    #runMany;
    // Returned props
    all;
    /**
     * Initializes a new Enmap, with options.
     * @param {Object} [options] Additional options for the enmap. See https://enmap.evie.codes/usage#enmap-options for details.
     * @param {string} [options.name] The name of the enmap. Represents its table name in sqlite. If present, the enmap is persistent.
     * If no name is given, the enmap is memory-only and is not saved in the database.
     * @param {string} [options.dataDir] Defaults to `./data`. Determines where the sqlite files will be stored. Can be relative
     * (to your project root) or absolute on the disk. Windows users , remember to escape your backslashes!
     * *Note*: Will not automatically create the folder if set manually, so make sure it exists.
     * @param {string} [options.cloneLevel] Defaults to deep. Determines how objects and arrays are treated when inserting and retrieving from the database.
     * See https://enmap.evie.codes/usage#enmap-options for more details on this option.
     * @param {boolean} [options.ensureProps] defaults to `true`. If enabled and the value in the enmap is an object, using ensure() will also ensure that
     * every property present in the default object will be added to the value, if it's absent. See ensure API reference for more information.
     * @param {*} [options.autoEnsure] default is disabled. When provided a value, essentially runs ensure(key, autoEnsure) automatically so you don't have to.
     * This is especially useful on get(), but will also apply on set(), and any array and object methods that interact with the database.
     * @param {Function} [options.serializer] Optional. If a function is provided, it will execute on the data when it is written to the database.
     * This is generally used to convert the value into a format that can be saved in the database, such as converting a complete class instance to just its ID.
     * This function may return the value to be saved, or a promise that resolves to that value (in other words, can be an async function).
     * @param {Function} [options.deserializer] Optional. If a function is provided, it will execute on the data when it is read from the database.
     * This is generally used to convert the value from a stored ID into a more complex object.
     * This function may return a value, or a promise that resolves to that value (in other words, can be an async function).
     * @param {boolean} [options.wal=false] Check out Write-Ahead Logging: https://www.sqlite.org/wal.html
     * @param {Function} [options.verbose=(query) => null] A function to call with the direct SQL statement being ran by Enmap internally
     * @example
     * const Enmap = require({ name: "myenmap" });
     * // Non-persistent enmap:
     * const inMemory = new Enmap();
     *
     * // Enmap that automatically assigns a default object when getting or setting anything.
     * const autoEnmap = new Enmap({name: "settings", autoEnsure: { setting1: false, message: "default message"}})
     */
    constructor(options = {}) {
        // const cache = new Map()
        // Define local properties from the options.
        this.#off = Symbol('option_off');
        this.#name = options.name ?? '::memory::';
        this.#autoEnsure = options.autoEnsure ?? this.#off;
        this.#wal = options.wal ?? true;
        this.#ensureProps = options.ensureProps ?? true;
        this.#serializer = options.serializer ? options.serializer : (data) => data;
        this.#verbose = options.verbose ? options.verbose : () => null;
        this.#deserializer = options.deserializer
            ? options.deserializer
            : (data) => data;
        this.#cloneLevel = options.cloneLevel ?? CloneLevel.DEEP;
        this.all = Symbol('all');
        if (this.#name !== '::memory::') {
            // Define the data directory where the enmap is stored.
            if (!options.dataDir) {
                if (!fs_1.default.existsSync('./data')) {
                    fs_1.default.mkdirSync('./data');
                }
            }
            const dataDir = (0, path_1.resolve)(process.cwd(), options.dataDir || 'data');
            this.#db = new better_sqlite3_1.default(`${dataDir}${path_1.sep}enmap.sqlite`, {
                verbose: this.#verbose,
            });
        }
        else {
            this.#db = new better_sqlite3_1.default(':memory:', { verbose: this.#verbose });
            this.#name = 'MemoryEnmap';
        }
        this.#validateName();
        // Initialize this property, to prepare for a possible destroy() call.
        // This is completely ignored in all situations except destroying the enmap.
        this.#isDestroyed = false;
        this.#init();
        instances.push(this);
    }
    /**
     * Sets a value in Enmap.
     * @param {string} key Required. The key of the element to add to The Enmap.
     * @param {*} val Required. The value of the element to add to The Enmap.
     * If the Enmap is persistent this value MUST be stringifiable as JSON.
     * @param {string} path Optional. The path to the property to modify inside the value object or array.
     * Can be a path with dot notation, such as "prop1.subprop2.subprop3"
     * @example
     * // Direct Value Examples
     * enmap.set('simplevalue', 'this is a string');
     * enmap.set('isEnmapGreat', true);
     * enmap.set('TheAnswer', 42);
     * enmap.set('IhazObjects', { color: 'black', action: 'paint', desire: true });
     * enmap.set('ArraysToo', [1, "two", "tree", "foor"])
     *
     * // Settings Properties
     * enmap.set('IhazObjects', 'blue', 'color'); //modified previous object
     * enmap.set('ArraysToo', 'three', 2); // changes "tree" to "three" in array.
     * @returns {Enmap} The enmap.
     */
    set(key, val, path = null) {
        const executions = this.#compareData(key, val, path);
        // TODO : This needs to be... better? Maybe a shared #changed method?
        if ((0, lodash_1.isFunction)(this.#changedCB)) {
            const data = this.has(key) ? this.get(key) : null;
            if (!(0, lodash_1.isNil)(path) && (0, lodash_1.isObject)(data)) {
                (0, lodash_1.set)(data, path, val);
            }
            this.#changedCB(key, data, this.get(key));
        }
        this.#runMany(executions);
        return this;
    }
    /**
     * Update an existing object value in Enmap by merging new keys. **This only works on objects**, any other value will throw an error.
     * Heavily inspired by setState from React's class components.
     * This is very useful if you have many different values to update and don't want to have more than one .set(key, value, prop) lines.
     * @param {string} key The key of the object to update.
     * @param {*} valueOrFunction Either an object to merge with the existing value, or a function that provides the existing object
     * and expects a new object as a return value. In the case of a straight value, the merge is recursive and will add any missing level.
     * If using a function, it is your responsibility to merge the objects together correctly.
     * @example
     * // Define an object we're going to update
     * enmap.set("obj", { a: 1, b: 2, c: 3 });
     *
     * // Direct merge
     * enmap.update("obj", { d: 4, e: 5 });
     * // obj is now { a: 1, b: 2, c: 3, d: 4, e: 5 }
     *
     * // Functional update
     * enmap.update("obj", (previous) => ({
     *   ...obj,
     *   f: 6,
     *   g: 7
     * }));
     * // this example takes heavy advantage of the spread operators.
     * // More info: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax
     */
    update(key, valueOrFunction) {
        this.#readyCheck();
        if ((0, lodash_1.isNil)(key)) {
            throw new error_js_1.default('Key not provided for update function', 'EnmapKeyError');
        }
        this.#check(key, ['Object']);
        const previousValue = this.get(key);
        const fn = (0, lodash_1.isFunction)(valueOrFunction)
            ? valueOrFunction
            : () => (0, lodash_1.merge)(previousValue, valueOrFunction);
        const merged = fn(previousValue);
        this.#internalSet(key, merged);
        return merged;
    }
    get(keyOrKeys, path = null) {
        this.#readyCheck();
        if ((0, lodash_1.isArray)(keyOrKeys))
            return this.#getMany(keyOrKeys, path);
        if (keyOrKeys === this.all)
            return this.#getAll();
        return this.#get(keyOrKeys, path);
    }
    #get(key, path = null) {
        // if (this.#autoEnsure !== this.#off && !this.has(key)) {
        //   this.#internalSet(key, this.#autoEnsure);
        // }
        const query = `SELECT * FROM '${this.#name}' WHERE key = ? ${path ? 'AND path = ?' : "AND path='::NULL::'"};`;
        const raw = path ? this.#db.prepare(query).get(key, path) : this.#db.prepare(query).get(key);
        return raw ? this.#parseData(raw.value, path) : null;
    }
    #getMany(keys, path) {
        return this.#db
            .prepare(`SELECT * FROM '${this.#name}' WHERE key IN (${'?, '
            .repeat(keys.length)
            .slice(0, -2)}) AND path='::NULL::';`)
            .all(keys)
            .reduce((acc, row) => {
            acc[row.key] = this.#parseData(row.value, path);
            return acc;
        }, {});
    }
    #getAll() {
        return this.#db
            .prepare(`SELECT * FROM '${this.#name}' WHERE path='::NULL::';`)
            .all()
            .reduce((acc, row) => {
            acc[row.key] = this.#parseData(row.value, row.path);
            return acc;
        }, {});
    }
    temp(keyOrKeys) {
        if ((0, lodash_1.isArray)(keyOrKeys)) {
            const data = this.#db
                .prepare(`SELECT * FROM ${this.#name} WHERE key IN (${'?, '
                .repeat(keyOrKeys.length)
                .slice(0, -2)})`)
                .all(keyOrKeys);
            return data.map(({ value, key }) => this.#parseData(value, key));
        }
        else {
            const data = this.#db
                .prepare(`SELECT * FROM ${this.#name} WHERE key = ?;`)
                .get(keyOrKeys);
            if (!data)
                return null;
            return this.#parseData(data.value, keyOrKeys);
        }
    }
    /**
     * Returns an observable object. Modifying this object or any of its properties/indexes/children
     * will automatically save those changes into enmap. This only works on
     * objects and arrays, not "basic" values like strings or integers.
     * @param {*} key The key to retrieve from the enmap.
     * @param {string} path Optional. The property to retrieve from the object or array.
     * @return {*} The value for this key.
     */
    observe(key, path = null) {
        this.#check(key, ['Object', 'Array'], path);
        const data = this.get(key, path);
        const proxy = (0, on_change_1.default)(data, () => {
            this.set(key, proxy, path);
        });
        return proxy;
    }
    /**
     * Retrieves the number of rows in the database for this enmap, even if they aren't fetched.
     * @return {number} The number of rows in the database.
     */
    get count() {
        const data = this.#db
            .prepare(`SELECT count(*) FROM '${this.#name}' WHERE path='::NULL::';`)
            .get();
        return data['count(*)'];
    }
    /**
     * Get the better-sqlite3 database object. Useful if you want to directly query or interact with the
     * underlying SQLite database. Use at your own risk, as errors here might cause loss of data or corruption!
     * @return {Database}
     */
    get db() {
        return this.#db;
    }
    /**
     * Force fetch one or more key values from the enmap. If the database has changed, that new value is used.
     * @param {string|number|Array<string|number>} keyOrKeys A single key or array of keys to force fetch from the enmap database.
     * @return {Enmap|*} The Enmap, including the new fetched values, or the value in case the function argument is a single key.
     */
    #fetch(keyOrKeys) {
        this.#readyCheck();
        if ((0, lodash_1.isArray)(keyOrKeys)) {
            const data = this.#db
                .prepare(`SELECT * FROM ${this.#name} WHERE key IN (${'?, '
                .repeat(keyOrKeys.length)
                .slice(0, -2)})`)
                .all(keyOrKeys);
            return data.map(({ value, key }) => this.#parseData(value, key));
        }
        else {
            const data = this.#db
                .prepare(`SELECT * FROM ${this.#name} WHERE key = ?;`)
                .get(keyOrKeys);
            if (!data)
                return null;
            return this.#parseData(data.value, keyOrKeys);
        }
    }
    /**
     * Generates an automatic numerical key for inserting a new value.
     * This is a "weak" method, it ensures the value isn't duplicated, but does not
     * guarantee it's sequential (if a value is deleted, another can take its place).
     * Useful for logging, actions, items, etc - anything that doesn't already have a unique ID.
     * @example
     * enmap.set(enmap.autonum, "This is a new value");
     * @return {number} The generated key number.
     */
    get autonum() {
        let { lastnum } = this.#db
            .prepare("SELECT lastnum FROM 'internal::autonum' WHERE enmap = ?")
            .get(this.#name);
        lastnum++;
        this.#db
            .prepare("INSERT OR REPLACE INTO 'internal::autonum' (enmap, lastnum) VALUES (?, ?)")
            .run(this.#name, lastnum);
        return lastnum.toString();
    }
    /**
     * Function called whenever data changes within Enmap after the initial load.
     * Can be used to detect if another part of your code changed a value in enmap and react on it.
     * @example
     * enmap.changed((keyName, oldValue, newValue) => {
     *   console.log(`Value of ${keyName} has changed from: \n${oldValue}\nto\n${newValue}`);
     * });
     * @param {Function} cb A callback function that will be called whenever data changes in the enmap.
     */
    changed(cb) {
        this.#changedCB = cb;
    }
    /**
     * Shuts down the database. USING THIS MAKES THE ENMAP UNUSABLE. You should
     * only use this method if you are closing your entire application.
     * This is already done by Enmap automatically on shutdown unless you disabled it.
     * @returns {Enmap} The enmap.
     */
    close() {
        this.#readyCheck();
        instances.splice(instances.indexOf(this), 1);
        this.#db.close();
        return this;
    }
    /**
     * Push to an array value in Enmap.
     * @param {string} key Required. The key of the array element to push to in Enmap.
     * This value MUST be a string or number.
     * @param {*} val Required. The value to push to the array.
     * @param {string} path Optional. The path to the property to modify inside the value object or array.
     * Can be a path with dot notation, such as "prop1.subprop2.subprop3"
     * @param {boolean} allowDupes Optional. Allow duplicate values in the array (default: false).
     * @example
     * // Assuming
     * enmap.set("simpleArray", [1, 2, 3, 4]);
     * enmap.set("arrayInObject", {sub: [1, 2, 3, 4]});
     *
     * enmap.push("simpleArray", 5); // adds 5 at the end of the array
     * enmap.push("arrayInObject", "five", "sub"); // adds "five" at the end of the sub array
     * @returns {Enmap} The enmap.
     */
    push(key, val, path = null, allowDupes = false) {
        const data = this.get(key);
        this.#check(key, 'Array', path);
        if (!(0, lodash_1.isNil)(path)) {
            const propValue = (0, lodash_1.get)(data, path);
            if (!allowDupes && propValue.indexOf(val) > -1)
                return this;
            propValue.push(val);
            (0, lodash_1.set)(data, path, propValue);
        }
        else {
            if (!allowDupes && data.indexOf(val) > -1)
                return this;
            data.push(val);
        }
        return this.#internalSet(key, data);
    }
    // AWESOME MATHEMATICAL METHODS
    /**
     * Executes a mathematical operation on a value and saves it in the enmap.
     * @param {string} key The enmap key on which to execute the math operation.
     * @param {string} operation Which mathematical operation to execute. Supports most
     * math ops: =, -, *, /, %, ^, and english spelling of those operations.
     * @param {number} operand The right operand of the operation.
     * @param {string} path Optional. The property path to execute the operation on, if the value is an object or array.
     * @example
     * // Assuming
     * points.set("number", 42);
     * points.set("numberInObject", {sub: { anInt: 5 }});
     *
     * points.math("number", "/", 2); // 21
     * points.math("number", "add", 5); // 26
     * points.math("number", "modulo", 3); // 2
     * points.math("numberInObject", "+", 10, "sub.anInt");
     *
     * @returns {Enmap} The enmap.
     */
    math(key, operation, operand, path = null) {
        this.#check(key, 'Number', path);
        const data = this.get(key, path);
        return this.set(key, this.#mathop(data, operation, operand), path);
    }
    /**
     * Increments a key's value or property by 1. Value must be a number, or a path to a number.
     * @param {string} key The enmap key where the value to increment is stored.
     * @param {string} path Optional. The property path to increment, if the value is an object or array.
     * @example
     * // Assuming
     * points.set("number", 42);
     * points.set("numberInObject", {sub: { anInt: 5 }});
     *
     * points.inc("number"); // 43
     * points.inc("numberInObject", "sub.anInt"); // {sub: { anInt: 6 }}
     * @returns {Enmap} The enmap.
     */
    inc(key, path = null) {
        this.#check(key, 'Number', path);
        if ((0, lodash_1.isNil)(path)) {
            let val = this.get(key);
            return this.#internalSet(key, ++val);
        }
        else {
            const data = this.get(key);
            let propValue = (0, lodash_1.get)(data, path);
            (0, lodash_1.set)(data, path, ++propValue);
            return this.#internalSet(key, data);
        }
    }
    /**
     * Decrements a key's value or property by 1. Value must be a number, or a path to a number.
     * @param {string} key The enmap key where the value to decrement is stored.
     * @param {string} path Optional. The property path to decrement, if the value is an object or array.
     * @example
     * // Assuming
     * points.set("number", 42);
     * points.set("numberInObject", {sub: { anInt: 5 }});
     *
     * points.dec("number"); // 41
     * points.dec("numberInObject", "sub.anInt"); // {sub: { anInt: 4 }}
     * @returns {Enmap} The enmap.
     */
    dec(key, path = null) {
        this.#check(key, 'Number', path);
        if ((0, lodash_1.isNil)(path)) {
            let val = this.get(key);
            return this.#internalSet(key, --val);
        }
        else {
            const data = this.get(key);
            let propValue = (0, lodash_1.get)(data, path);
            (0, lodash_1.set)(data, path, --propValue);
            return this.#internalSet(key, data);
        }
    }
    /**
     * Returns the key's value, or the default given, ensuring that the data is there.
     * This is a shortcut to "if enmap doesn't have key, set it, then get it" which is a very common pattern.
     * @param {string} key Required. The key you want to make sure exists.
     * @param {*} defaultValue Required. The value you want to save in the database and return as default.
     * @param {string} path Optional. If presents, ensures both the key exists as an object, and the full path exists.
     * Can be a path with dot notation, such as "prop1.subprop2.subprop3"
     * @example
     * // Simply ensure the data exists (for using property methods):
     * enmap.ensure("mykey", {some: "value", here: "as an example"});
     * enmap.has("mykey"); // always returns true
     * enmap.get("mykey", "here") // returns "as an example";
     *
     * // Get the default value back in a variable:
     * const settings = mySettings.ensure("1234567890", defaultSettings);
     * console.log(settings) // enmap's value for "1234567890" if it exists, otherwise the defaultSettings value.
     * @return {*} The value from the database for the key, or the default value provided for a new key.
     */
    ensure(key, defaultValue, path = null) {
        this.#readyCheck();
        if (this.#autoEnsure !== this.#off) {
            // eslint-disable-next-line max-len
            if (!(0, lodash_1.isNil)(defaultValue))
                process.emitWarning(`Saving "${key}" autoEnsure value was provided for this enmap but a default value has also been provided. The defaultValue will be ignored, autoEnsure value is used instead.`);
            defaultValue = this.#autoEnsure;
        }
        if ((0, lodash_1.isNil)(defaultValue))
            throw new error_js_1.default(`No default value provided on ensure method for "${key}" in "${this.#name}"`, 'EnmapArgumentError');
        const clonedValue = this.#clone(defaultValue);
        if (!(0, lodash_1.isNil)(path)) {
            if (this.#ensureProps)
                this.ensure(key, {});
            if (this.has(key, path))
                return this.get(key, path);
            this.set(key, defaultValue, path);
            return defaultValue;
        }
        if (this.#ensureProps && (0, lodash_1.isObject)(this.get(key))) {
            if (!(0, lodash_1.isObject)(clonedValue))
                throw new error_js_1.default(`Default value for "${key}" in enmap "${this.#name}" must be an object when merging with an object value.`, 'EnmapArgumentError');
            const merged = (0, lodash_1.merge)(clonedValue, this.get(key));
            this.set(key, merged);
            return merged;
        }
        if (this.has(key))
            return this.get(key);
        this.set(key, clonedValue);
        return clonedValue;
    }
    /* BOOLEAN METHODS THAT CHECKS FOR THINGS IN ENMAP */
    /**
     * Returns whether or not the key exists in the Enmap.
     * @param {string} key Required. The key of the element to add to The Enmap or array.
     * This value MUST be a string or number.
     * @param {string} path Optional. The property to verify inside the value object or array.
     * Can be a path with dot notation, such as "prop1.subprop2.subprop3"
     * @example
     * if(enmap.has("myKey")) {
     *   // key is there
     * }
     *
     * if(!enmap.has("myOtherKey", "oneProp.otherProp.SubProp")) return false;
     * @returns {boolean}
     */
    has(key, path = null) {
        this.#readyCheck();
        const query = this.db.prepare(`SELECT count(*) FROM '${this.#name}' WHERE key = ?${path ? ' AND path = ?' : "AND path='::NULL::'"};`);
        const row = path ? query.get(key, path) : query.get(key);
        return row['count(*)'] === 1;
    }
    /**
     * Performs Array.includes() on a certain enmap value. Works similar to
     * [Array.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).
     * @param {string} key Required. The key of the array to check the value of.
     * @param {string|number} val Required. The value to check whether it's in the array.
     * @param {string} path Optional. The property to access the array inside the value object or array.
     * Can be a path with dot notation, such as "prop1.subprop2.subprop3"
     * @return {boolean} Whether the array contains the value.
     */
    includes(key, val, path = null) {
        this.#readyCheck();
        this.#check(key, ['Array', 'Object']);
        const data = this.get(key);
        if (!(0, lodash_1.isNil)(path)) {
            const propValue = (0, lodash_1.get)(data, path);
            if ((0, lodash_1.isArray)(propValue)) {
                return propValue.includes(val);
            }
            throw new error_js_1.default(`The property "${path}" in key "${key}" is not an Array in the enmap "${this.#name}" (property was of type "${propValue && propValue.constructor.name}")`, 'EnmapTypeError');
        }
        else if ((0, lodash_1.isArray)(data)) {
            return data.includes(val);
        }
        throw new error_js_1.default(`The value of key "${key}" is not an Array in the enmap "${this.#name}" (value was of type "${data && data.constructor.name}")`, 'EnmapTypeError');
    }
    /**
     * Deletes a key in the Enmap.
     * @param {string} key Required. The key of the element to delete from The Enmap.
     * @param {string} path Optional. The name of the property to remove from the object.
     * Can be a path with dot notation, such as "prop1.subprop2.subprop3"
     * @returns {Enmap} The enmap.
     */
    //@ts-ignore
    delete(key, path = null) {
        this.#readyCheck();
        key = key.toString();
        const oldValue = this.get(key);
        if (!(0, lodash_1.isNil)(path)) {
            let data = this.get(key);
            //@ts-ignore
            path = (0, lodash_1.toPath)(path);
            //@ts-ignore
            const last = path.pop();
            const propValue = path.length ? (0, lodash_1.get)(data, path) : data;
            if ((0, lodash_1.isArray)(propValue)) {
                propValue.splice(last, 1);
            }
            else {
                delete propValue[last];
            }
            if (path.length) {
                (0, lodash_1.set)(data, path, propValue);
            }
            else {
                data = propValue;
            }
            this.set(key, data);
        }
        else {
            if (typeof this.#changedCB === 'function') {
                this.#changedCB(key, oldValue, null);
            }
            this.#db.prepare(`DELETE FROM ${this.#name} WHERE key = ?`).run(key);
            return this;
        }
        return this;
    }
    /**
     * Deletes everything from the enmap. If persistent, clears the database of all its data for this table.
     */
    deleteAll() {
        this.#readyCheck();
        this.#db.prepare(`DELETE FROM ${this.#name};`).run();
    }
    /**
     * Deletes everything from the enmap. If persistent, clears the database of all its data for this table.
     * @returns {void}
     */
    clear() {
        return this.deleteAll();
    }
    /**
     * Completely destroys the entire enmap. This deletes the database tables entirely.
     * It will not affect other enmap data in the same database, however.
     * THIS ACTION WILL DESTROY YOUR DATA AND CANNOT BE UNDONE.
     * @returns {null}
     */
    destroy() {
        this.deleteAll();
        this.#isDestroyed = true;
        const transaction = this.#db.transaction((run) => {
            for (const stmt of run) {
                this.#db.prepare(stmt).run();
            }
        });
        transaction([
            `DROP TABLE IF EXISTS ${this.#name};`,
            `DROP TABLE IF EXISTS 'internal::changes::${this.#name}';`,
            `DELETE FROM 'internal::autonum' WHERE enmap = '${this.#name}';`,
        ]);
        return null;
    }
    /**
     * Remove a value in an Array or Object element in Enmap. Note that this only works for
     * values, not keys. Note that only one value is removed, no more. Arrays of objects must use a function to remove,
     * as full object matching is not supported.
     * @param {string} key Required. The key of the element to remove from in Enmap.
     * This value MUST be a string or number.
     * @param {*|Function} val Required. The value to remove from the array or object. OR a function to match an object.
     * If using a function, the function provides the object value and must return a boolean that's true for the object you want to remove.
     * @param {string} path Optional. The name of the array property to remove from.
     * Can be a path with dot notation, such as "prop1.subprop2.subprop3".
     * If not presents, removes directly from the value.
     * @example
     * // Assuming
     * enmap.set('array', [1, 2, 3])
     * enmap.set('objectarray', [{ a: 1, b: 2, c: 3 }, { d: 4, e: 5, f: 6 }])
     *
     * enmap.remove('array', 1); // value is now [2, 3]
     * enmap.remove('objectarray', (value) => value.e === 5); // value is now [{ a: 1, b: 2, c: 3 }]
     * @returns {Enmap} The enmap.
     */
    remove(key, val, path = null) {
        this.#readyCheck();
        this.#check(key, ['Array', 'Object']);
        const data = this.get(key, path);
        const criteria = (0, lodash_1.isFunction)(val) ? val : (value) => val === value;
        const index = data.findIndex(criteria);
        if (index > -1) {
            data.splice(index, 1);
        }
        return this.set(key, data, path);
    }
    /**
     * Exports the enmap data to a JSON file.
     * **__WARNING__**: Does not work on memory enmaps containing complex data!
     * @returns {string} The enmap data in a stringified JSON format.
     */
    export() {
        this.#readyCheck();
        return (0, serialize_javascript_1.default)({
            name: this.#name,
            version: pkgdata.version,
            exportDate: Date.now(),
            keys: this.map((value, key) => ({ key, value })),
        }, {
            space: 2,
        });
    }
    /**
     * Import an existing json export from enmap from a string. This data must have been exported from enmap,
     * and must be from a version that's equivalent or lower than where you're importing it.
     * @param {string} data The data to import to Enmap. Must contain all the required fields provided by export()
     * @param {boolean} overwrite Defaults to `true`. Whether to overwrite existing key/value data with incoming imported data
     * @param {boolean} clear Defaults to `false`. Whether to clear the enmap of all data before importing
     * (**__WARNING__**: Any existing data will be lost! This cannot be undone.)
     * @returns {Enmap} The enmap with the new data.
     */
    import(data, overwrite = true, clear = false) {
        this.#readyCheck();
        if (clear)
            this.deleteAll();
        if ((0, lodash_1.isNil)(data))
            throw new error_js_1.default(`No data provided for import() in "${this.#name}"`, 'EnmapImportError');
        try {
            const parsed = eval(`(${data})`);
            for (const thisEntry of parsed.keys) {
                const { key, value } = thisEntry;
                if (!overwrite && this.has(key))
                    continue;
                this.#internalSet(key, this.#deserializer(value, key));
            }
        }
        catch (err) {
            throw new error_js_1.default(`Data provided for import() in "${this.#name}" is invalid JSON. Stacktrace:\n${err}`, 'EnmapImportError');
        }
        return this;
    }
    /**
     * Initialize multiple Enmaps easily.
     * @param {Array<string>} names Array of strings. Each array entry will create a separate enmap with that name.
     * @param {Object} options Options object to pass to each enmap, excluding the name..
     * @example
     * // Using local variables.
     * const Enmap = require('enmap');
     * const { settings, tags, blacklist } = Enmap.multi(['settings', 'tags', 'blacklist']);
     *
     * // Attaching to an existing object (for instance some API's client)
     * const Enmap = require("enmap");
     * Object.assign(client, Enmap.multi(["settings", "tags", "blacklist"]));
     *
     * @returns {Object} An array of initialized Enmaps.
     */
    static multi(names, options = {}) {
        if (!names.length || names.length < 1) {
            throw new error_js_1.default('"names" argument must be an array of string names.', 'EnmapTypeError');
        }
        const returnvalue = {};
        for (const name of names) {
            const enmap = new Enmap({ name, ...options });
            returnvalue[name] = enmap;
        }
        return returnvalue;
    }
    /* INTERNAL (Private) METHODS */
    /*
     * Internal Method. Initializes the enmap depending on given values.
     * @param {Map} database In order to set data to the Enmap, one must be provided.
     */
    #init() {
        if (!this.#db) {
            throw new error_js_1.default('Database Could Not Be Opened', 'EnmapDBConnectionError');
        }
        const table = this.#db
            .prepare("SELECT count(*) FROM sqlite_master WHERE type='table' AND name = ?;")
            .get(this.#name);
        if (!table['count(*)']) {
            this.#db
                .prepare(`CREATE TABLE '${this.#name}' (key text, path text, value text, PRIMARY KEY('key','path'))`)
                .run();
            this.#db.pragma('synchronous = 1');
            if (this.#wal)
                this.#db.pragma('journal_mode = wal');
        }
        this.#db
            .prepare(`CREATE TABLE IF NOT EXISTS 'internal::autonum' (enmap TEXT PRIMARY KEY, lastnum INTEGER)`)
            .run();
        this.#deleteStmt = this.db.prepare(`DELETE FROM '${this.#name}' WHERE key=@key AND path=@path;`);
        this.#insertStmt = this.db.prepare(`INSERT OR REPLACE INTO '${this.#name}' (key, path, value) VALUES (@key, @path, @value);`);
        this.#getPaginatedStmt = this.db.prepare(`SELECT ROWID, * FROM '${this.#name}' WHERE rowid > @lastRowId AND path = '::NULL::' ORDER BY rowid LIMIT @limit;`);
        this.#runMany = this.db.transaction((transactions) => {
            for (const [statement, transactionRow] of transactions) {
                statement.run(transactionRow);
            }
        });
    }
    /*
     * INTERNAL method to verify the type of a key or property
     * Will THROW AN ERROR on wrong type, to simplify code.
     * @param {string} key Required. The key of the element to check
     * @param {string} type Required. The javascript constructor to check
     * @param {string} path Optional. The dotProp path to the property in the object enmap.
     */
    #check(key, type, path = null) {
        key = key.toString();
        if (!this.has(key))
            throw new error_js_1.default(`The key "${key}" does not exist in the enmap "${this.#name}"`, 'EnmapPathError');
        if (!type)
            return;
        if (!(0, lodash_1.isArray)(type))
            type = [type];
        if (!(0, lodash_1.isNil)(path)) {
            this.#check(key, 'Object');
            const data = this.get(key);
            if ((0, lodash_1.isNil)((0, lodash_1.get)(data, path))) {
                throw new error_js_1.default(`The property "${path}" in key "${key}" does not exist. Please set() it or ensure() it."`, 'EnmapPathError');
            }
            if (!type.includes((0, lodash_1.get)(data, path).constructor.name)) {
                throw new error_js_1.default(`The property "${path}" in key "${key}" is not of type "${type.join('" or "')}" in the enmap "${this.#name}" 
(key was of type "${(0, lodash_1.get)(data, path).constructor.name}")`, 'EnmapTypeError');
            }
        }
        else if (!type.includes(this.get(key).constructor.name)) {
            throw new error_js_1.default(`The value for key "${key}" is not of type "${type.join('" or "')}" in the enmap "${this.#name}" (value was of type "${this.get(key).constructor.name}")`, 'EnmapTypeError');
        }
    }
    /*
     * INTERNAL method to execute a mathematical operation. Cuz... javascript.
     * And I didn't want to import mathjs!
     * @param {number} base the lefthand operand.
     * @param {string} op the operation.
     * @param {number} opand the righthand operand.
     * @return {number} the result.
     */
    #mathop(base, op, opand) {
        if (base == undefined || op == undefined || opand == undefined)
            throw new error_js_1.default('Math Operation requires base and operation', 'EnmapTypeError');
        switch (op) {
            case 'add':
            case 'addition':
            case '+':
                return base + opand;
            case 'sub':
            case 'subtract':
            case '-':
                return base - opand;
            case 'mult':
            case 'multiply':
            case '*':
                return base * opand;
            case 'div':
            case 'divide':
            case '/':
                return base / opand;
            case 'exp':
            case 'exponent':
            case '^':
                return Math.pow(base, opand);
            case 'mod':
            case 'modulo':
            case '%':
                return base % opand;
            case 'rand':
            case 'random':
                return Math.floor(Math.random() * Math.floor(opand));
        }
        return null;
    }
    /**
     * Internal method used to validate persistent enmap names (valid Windows filenames)
     */
    #validateName() {
        this.#name = this.#name.replace(/[^a-z0-9]/gi, '_').toLowerCase();
    }
    /*
     * Internal Method. Parses JSON data.
     * Reserved for future use (logical checking)
     * @param {*} data The data to check/parse
     * @returns {*} An object or the original data.
     */
    #parseData(data, key) {
        return this.#deserializer(eval(`(${data})`), key);
    }
    /*
     * Internal Method. Clones a value or object with the enmap's set clone level.
     * @param {*} data The data to clone.
     * @return {*} The cloned value.
     */
    #clone(data) {
        if (this.#cloneLevel === 'none')
            return data;
        if (this.#cloneLevel === 'shallow')
            return (0, lodash_1.clone)(data);
        if (this.#cloneLevel === 'deep')
            return (0, lodash_1.cloneDeep)(data);
        throw new error_js_1.default("Invalid cloneLevel. What did you *do*, this shouldn't happen!", 'EnmapOptionsError');
    }
    /*
     * Internal Method. Verifies that the database is ready, assuming persistence is used.
     */
    #readyCheck() {
        if (this.#isDestroyed)
            throw new error_js_1.default('This enmap has been destroyed and can no longer be used without being re-initialized.', 'EnmapDestroyedError');
    }
    /*
     * Internal Method. Sets data without looking at cache, fetching, or anything else. Used when fetch/ready checks are already made.
     */
    #internalSet(key, value) {
        let serialized;
        try {
            serialized = (0, serialize_javascript_1.default)(this.#serializer(value, key));
        }
        catch (e) {
            serialized = (0, serialize_javascript_1.default)(this.#serializer(on_change_1.default.target(value), key));
        }
        const executions = this.#compareData(key, value);
        this.#runMany(executions);
        return this;
    }
    #compareData(key, newValue, path = null) {
        const executions = [];
        const currentData = this.has(key) ? this.get(key) : '::NULL::';
        const currentPaths = (0, utils_js_1.getPaths)(currentData);
        const paths = path
            ? (0, utils_js_1.getPaths)((0, lodash_1.set)((0, lodash_1.cloneDeep)(currentData), path, newValue))
            : (0, utils_js_1.getPaths)(newValue);
        for (const [currentPath, value] of Object.entries(currentPaths)) {
            if (!(0, lodash_1.isNil)(paths[currentPath]) || paths[currentPath] !== value) {
                executions.push([this.#deleteStmt, { key, path: currentPath }]);
                if (!(0, lodash_1.isNil)(paths[currentPath])) {
                    executions.push([
                        this.#insertStmt,
                        { key, path: currentPath, value: paths[currentPath] },
                    ]);
                }
            }
            delete paths[currentPath];
        }
        for (const [currentPath, value] of Object.entries(paths)) {
            executions.push([this.#insertStmt, { key, path: currentPath, value }]);
        }
        return executions;
    }
    /*
    BELOW IS HEAVILY MODIFIED DISCORD.JS COLLECTION CODE
    Per notes in the LICENSE file, this project contains code from Amish Shah's Discord.js
    library. The code is from the Collections object, in discord.js version 11.
    The code has been HEAVILY modified and as such I no longer consider this license relevant.
    However, I remember my roots, and credit given where credit is due, it's still very inspired.
    https://github.com/discordjs/collection
    */
    /**
     * Returns an unordered array of the values of this Enmap.
     * @returns {Array}
     */
    get values() {
        const rows = this.db
            .prepare(`SELECT value FROM '${this.#name}' WHERE path='::NULL::';`)
            .all();
        return rows.map((row) => this.#parseData(row.value, row.key));
    }
    get keys() {
        const rows = this.db
            .prepare(`SELECT key FROM '${this.#name}' WHERE path='::NULL::';`)
            .all();
        return rows.map((row) => row.key);
    }
    get entries() {
        const rows = this.db
            .prepare(`SELECT key, value FROM '${this.#name}' WHERE path='::NULL::';`)
            .all();
        return rows.map((row) => [row.key, this.#parseData(row.value, row.key)]);
    }
    /**
     * Returns an unordered array of the keys of this Enmap
     * @returns {Array<string | number>}
     * @deprecated
     */
    keyArray() {
        process.emitWarning('enmap.keyArray() is deprecated, use the enmap.keys getter instead.');
        return this.keys;
    }
    /**
     * Retrieves all the indexes (keys) in the database for this enmap, even if they aren't fetched.
     * @return {Array<string>} Array of all indexes (keys) in the enmap, cached or not.
     */
    get indexes() {
        process.emitWarning('The enmap.indexes getter is deprecated, use the enmap.keys getter instead.');
        return this.keys;
    }
    /**
     * Obtains random value(s) from this Enmap. This relies on {@link Enmap#array}.
     * @param {number} [count=1] Number of values to obtain randomly
     * @returns {*|Array<*>} The single value if `count` is undefined,
     * or an array of values of `count` length
     */
    random(count = 1) {
        const data = this.#db
            .prepare(`SELECT * FROM '${this.#name}' WHERE path='::NULL::' ORDER BY RANDOM() LIMIT ${Number(count)};`)
            .all();
        if (count === 1) {
            return this.#parseData(data[0].value, data[0].key);
        }
        return data.reduce((acc, row) => {
            acc[row.key] = this.#parseData(row.value, row.key);
            return acc;
        }, {});
    }
    /**
     * Obtains random key(s) from this Enmap. This relies on {@link Enmap#keyArray}
     * @param {number} [count] Number of keys to obtain randomly
     * @returns {*|Array<*>} The single key if `count` is undefined,
     * or an array of keys of `count` length
     */
    randomKey(count) {
        let arr = this.keyArray();
        if (count === undefined)
            return arr[Math.floor(Math.random() * arr.length)];
        if (typeof count !== 'number')
            throw new TypeError('The count must be a number.');
        if (!Number.isInteger(count) || count < 1)
            throw new RangeError('The count must be an integer greater than 0.');
        if (arr.length === 0)
            return [];
        const rand = new Array(count);
        arr = arr.slice();
        // eslint-disable-next-line
        for (let i = 0; i < count; i++)
            rand[i] = arr.splice(Math.floor(Math.random() * arr.length), 1)[0];
        return rand;
    }
    /**
     * Searches for all items where their specified property's value is identical to the given value
     * (`item[prop] === value`).
     * @param {string} prop The property to test against
     * @param {*} value The expected value
     * @returns {Array}
     * @example
     * enmap.findAll('username', 'Bob');
     */
    findAll(prop, value) {
        if (typeof prop !== 'string')
            throw new TypeError('Key must be a string.');
        if ((0, lodash_1.isNil)(value))
            throw new Error('Value must be specified.');
        const results = [];
        for (const item of this.values) {
            if (item[prop] === value ||
                ((0, lodash_1.isObject)(item) && (0, lodash_1.get)(item, prop) === value))
                results.push(item);
        }
        return results;
    }
    /**
     * Searches for a single item where its specified property's value is identical to the given value
     * (`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to
     * [Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).
     * <warn>All Enmap used in Discord.js are mapped using their `id` property, and if you want to find by id you
     * should use the `get` method. See
     * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>
     * @param {string|Function} propOrFn The property to test against, or the function to test with
     * @param {*} [value] The expected value - only applicable and required if using a property for the first argument
     * @returns {*}
     * @example
     * enmap.find('username', 'Bob');
     * @example
     * enmap.find(val => val.username === 'Bob');
     */
    find(propOrFn, value) {
        this.#readyCheck();
        if ((0, lodash_1.isNil)(propOrFn) || (!(0, lodash_1.isFunction)(propOrFn) && (0, lodash_1.isNil)(value))) {
            throw new error_js_1.default('find requires either a prop and value, or a function. One of the provided arguments was null or undefined', 'EnmapArgumentError');
        }
        const func = (0, lodash_1.isFunction)(propOrFn)
            ? propOrFn
            : //@ts-ignore
                (v) => value === (0, lodash_1.get)(v, propOrFn);
        for (const [key, val] of this.entries) {
            if (func(val, key, this))
                return val;
        }
        return null;
    }
    /**
     * Searches for the key of a single item where its specified property's value is identical to the given value
     * (`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to
     * [Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).
     * @param {string|Function} propOrFn The property to test against, or the function to test with
     * @param {*} [value] The expected value - only applicable and required if using a property for the first argument
     * @returns {string|number}
     * @example
     * enmap.findKey('username', 'Bob');
     * @example
     * enmap.findKey(val => val.username === 'Bob');
     */
    findKey(propOrFn, value) {
        this.#readyCheck();
        if (typeof propOrFn === 'string') {
            if ((0, lodash_1.isNil)(value))
                throw new Error('Value must be specified.');
            for (const [key, val] of this.entries) {
                if (val[propOrFn] === value ||
                    ((0, lodash_1.isObject)(val) && (0, lodash_1.get)(val, propOrFn) === value))
                    return key;
            }
            return null;
        }
        else if (typeof propOrFn === 'function') {
            for (const [key, val] of this.entries) {
                if (propOrFn(val, key, this))
                    return key;
            }
            return null;
        }
        throw new Error('First argument must be a property string or a function.');
    }
    /**
     * Removes entries that satisfy the provided filter function.
     * @param {Function} fn Function used to test (should return a boolean)
     * @param {Object} [thisArg] Value to use as `this` when executing function
     * @returns {number} The number of removed entries
     */
    sweep(fn, thisArg) {
        this.#readyCheck();
        if (thisArg)
            fn = fn.bind(thisArg);
        const previousSize = this.count;
        for (const [key, val] of this.entries) {
            if (fn(val, key, this))
                this.delete(key);
        }
        return previousSize - this.count;
    }
    /**
     * Identical to
     * [Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),
     * but returns a Enmap instead of an Array.
     * @param {Function} fn Function used to test (should return a boolean)
     * @param {Object} [thisArg] Value to use as `this` when executing function
     * @returns {Enmap}
     */
    filter(fn, thisArg) {
        this.#readyCheck();
        if (thisArg)
            fn = fn.bind(thisArg);
        const results = new Enmap();
        for (const [key, val] of this.entries) {
            if (fn(val, key, this))
                results.set(key, val);
        }
        return results;
    }
    /**
     * Identical to
     * [Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).
     * @param {Function} fn Function used to test (should return a boolean)
     * @param {Object} [thisArg] Value to use as `this` when executing function
     * @returns {Array}
     */
    filterArray(fn, thisArg) {
        this.#readyCheck();
        if (thisArg)
            fn = fn.bind(thisArg);
        const results = [];
        for (const [key, val] of this.entries) {
            if (fn(val, key, this))
                results.push(val);
        }
        return results;
    }
    /**
     * Identical to
     * [Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).
     * @param {Function} fn Function that produces an element of the new array, taking three arguments
     * @param {*} [thisArg] Value to use as `this` when executing function
     * @returns {Array}
     */
    map(fn, thisArg) {
        this.#readyCheck();
        if (thisArg)
            fn = fn.bind(thisArg);
        const arr = new Array(this.count);
        let i = 0;
        for (const [key, val] of this.entries)
            arr[i++] = fn(val, key, this);
        return arr;
    }
    /**
     * Identical to
     * [Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).
     * @param {Function} fn Function used to test (should return a boolean)
     * @param {Object} [thisArg] Value to use as `this` when executing function
     * @returns {boolean}
     */
    some(fn, thisArg) {
        this.#readyCheck();
        if (thisArg)
            fn = fn.bind(thisArg);
        for (const [key, val] of this.entries) {
            if (fn(val, key, this))
                return true;
        }
        return false;
    }
    /**
     * Identical to
     * [Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).
     * @param {Function} fn Function used to test (should return a boolean)
     * @param {Object} [thisArg] Value to use as `this` when executing function
     * @returns {boolean}
     */
    every(fn, thisArg) {
        this.#readyCheck();
        if (thisArg)
            fn = fn.bind(thisArg);
        for (const [key, val] of this.entries) {
            if (!fn(val, key, this))
                return false;
        }
        return true;
    }
    /**
     * Identical to
     * [Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).
     * @param {Function} fn Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,
     * and `enmap`
     * @param {*} [initialValue] Starting value for the accumulator
     * @returns {*}
     */
    reduce(fn, initialValue) {
        this.#readyCheck();
        let accumulator;
        if (typeof initialValue !== 'undefined') {
            accumulator = initialValue;
            for (const [key, val] of this.entries)
                accumulator = fn(accumulator, val, key, this);
        }
        else {
            let first = true;
            for (const [key, val] of this.entries) {
                if (first) {
                    accumulator = val;
                    first = false;
                    continue;
                }
                accumulator = fn(accumulator, val, key, this);
            }
        }
        return accumulator;
    }
    /**
     * Creates an identical shallow copy of this Enmap.
     * @returns {Enmap}
     * @example const newColl = someColl.clone();
     */
    clone() {
        this.#readyCheck();
        const enmap = new Enmap();
        // TODO: ADD DATA TO IT, meaning, add data so it's all saved in DB and everything.
        return enmap;
    }
    /**
     * Combines this Enmap with others into a new Enmap. None of the source Enmaps are modified.
     * @param {...Enmap} enmaps Enmaps to merge
     * @returns {Enmap}
     * @example const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);
     */
    concat(...enmaps) {
        this.#readyCheck();
        const newColl = this.clone();
        for (const coll of enmaps) {
            for (const [key, val] of coll)
                newColl.set(key, val);
        }
        return newColl;
    }
    /* DEPRECATED METHODS */
    array() {
        process.emitWarning('Enmap.array() is deprecated, please use Enmap.values instead!');
        return this.values;
    }
}
module.exports = Enmap;
/**
 * @external forEach
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach}
 */
/**
 * @external keys
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys}
 */
/**
 * @external values
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values}
 */
//# sourceMappingURL=index.js.map